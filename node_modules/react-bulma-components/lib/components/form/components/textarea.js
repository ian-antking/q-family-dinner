'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _modifiers = require('../../../modifiers');

var _modifiers2 = _interopRequireDefault(_modifiers);

var _constants = require('../../../constants');

var _constants2 = _interopRequireDefault(_constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var colors = [null].concat(Object.keys(_constants2.default.COLORS).map(function (key) {
  return _constants2.default.COLORS[key];
}));

var Textarea = function Textarea(_ref) {
  var _classnames;

  var className = _ref.className,
      size = _ref.size,
      color = _ref.color,
      readOnly = _ref.readOnly,
      disabled = _ref.disabled,
      placeholder = _ref.placeholder,
      rows = _ref.rows,
      value = _ref.value,
      name = _ref.name,
      allProps = _objectWithoutProperties(_ref, ['className', 'size', 'color', 'readOnly', 'disabled', 'placeholder', 'rows', 'value', 'name']);

  var props = _modifiers2.default.clean(allProps);
  return _react2.default.createElement('textarea', _extends({
    name: name
  }, props, {
    value: value,
    rows: rows,
    placeholder: placeholder,
    readOnly: readOnly,
    disabled: disabled,
    className: (0, _classnames3.default)('textarea', _modifiers2.default.classnames(allProps), className, (_classnames = {}, _defineProperty(_classnames, 'is-' + size, size), _defineProperty(_classnames, 'is-' + color, color), _classnames))
  }));
};

Textarea.propTypes = _extends({}, _modifiers2.default.propTypes, {
  className: _propTypes2.default.string,
  style: _propTypes2.default.shape({}),
  size: _propTypes2.default.oneOf(['small', 'medium', 'large']),
  color: _propTypes2.default.oneOf(colors),
  readOnly: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  placeholder: _propTypes2.default.string,
  rows: _propTypes2.default.number,
  value: _propTypes2.default.string,
  /**
   * The name of the input field Commonly used for [multi-input handling](https://reactjs.org/docs/forms.html#handling-multiple-inputs)
   */
  name: _propTypes2.default.string
});

Textarea.defaultProps = _extends({}, _modifiers2.default.defaultProps, {
  className: '',
  style: {},
  size: null,
  color: null,
  readOnly: false,
  disabled: false,
  placeholder: '',
  rows: 4,
  value: '',
  name: ''
});

exports.default = Textarea;
//# sourceMappingURL=textarea.js.map