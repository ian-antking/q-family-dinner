{"version":3,"sources":["../../../../../src/components/form/components/field/field.js"],"names":["Field","className","align","multiline","horizontal","kind","props","k","Label","FieldLabel","Body","FieldBody","propTypes","modifiers","children","PropTypes","node","string","style","shape","renderAs","oneOfType","func","oneOf","bool","defaultProps"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AAEA,IAAMA,QAAQ,SAARA,KAAQ,OAOR;AAAA;;AAAA,MANJC,SAMI,QANJA,SAMI;AAAA,MALJC,KAKI,QALJA,KAKI;AAAA,MAJJC,SAII,QAJJA,SAII;AAAA,MAHJC,UAGI,QAHJA,UAGI;AAAA,MAFJC,IAEI,QAFJA,IAEI;AAAA,MADDC,KACC;;AACJ,MAAIC,IAAI,IAAR;;AAEA,MAAIF,SAAS,QAAb,EAAuB;AACrBE,QAAI,YAAJ;AACD,GAFD,MAEO,IAAIF,SAAS,OAAb,EAAsB;AAC3BE,QAAI,YAAJ;AACD;;AAED,SACE,8BAAC,iBAAD,eACMD,KADN;AAEE,eAAW,0BAAW,OAAX,EAAoBL,SAApB,uDACLM,CADK,EACCA,CADD,gCAELA,CAFK,SAEAL,KAFA,EAEUK,KAAKL,KAFf,gCAGLK,CAHK,iBAGWA,MAAM,YAAN,IAAsBJ,SAHjC,gCAIT,eAJS,EAIQC,UAJR;AAFb,KADF;AAWD,CA3BD;;AA6BAJ,MAAMQ,KAAN,GAAcC,oBAAd;;AAEAT,MAAMU,IAAN,GAAaC,mBAAb;;AAEAX,MAAMY,SAAN,gBACKC,oBAAUD,SADf;AAEEE,YAAUC,oBAAUC,IAFtB;AAGEf,aAAWc,oBAAUE,MAHvB;AAIEC,SAAOH,oBAAUI,KAAV,CAAgB,EAAhB,CAJT;AAKEC,YAAUL,oBAAUM,SAAV,CAAoB,CAACN,oBAAUE,MAAX,EAAmBF,oBAAUO,IAA7B,CAApB,CALZ;AAMEpB,SAAOa,oBAAUQ,KAAV,CAAgB,CAAC,UAAD,EAAa,OAAb,CAAhB,CANT;AAOElB,QAAMU,oBAAUQ,KAAV,CAAgB,CAAC,QAAD,EAAW,OAAX,CAAhB,CAPR;AAQEpB,aAAWY,oBAAUS,IARvB;AASEpB,cAAYW,oBAAUS;AATxB;;AAYAxB,MAAMyB,YAAN,gBACKZ,oBAAUY,YADf;AAEEX,YAAU,IAFZ;AAGEb,aAAW,EAHb;AAIEiB,SAAO,EAJT;AAKEE,YAAU,KALZ;AAMElB,SAAO,IANT;AAOEG,QAAM,IAPR;AAQEF,aAAW,KARb;AASEC,cAAY;AATd;;kBAYeJ,K","file":"field.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport FieldLabel from './field-label';\nimport FieldBody from './field-body';\nimport modifiers from '../../../../modifiers';\nimport Element from '../../../element';\n\nconst Field = ({\n  className,\n  align,\n  multiline,\n  horizontal,\n  kind,\n  ...props\n}) => {\n  let k = null;\n\n  if (kind === 'addons') {\n    k = 'has-addons';\n  } else if (kind === 'group') {\n    k = 'is-grouped';\n  }\n\n  return (\n    <Element\n      {...props}\n      className={classnames('field', className, {\n        [`${k}`]: k,\n        [`${k}-${align}`]: k && align,\n        [`${k}-multiline`]: k === 'is-grouped' && multiline,\n        'is-horizontal': horizontal,\n      })}\n    />\n  );\n};\n\nField.Label = FieldLabel;\n\nField.Body = FieldBody;\n\nField.propTypes = {\n  ...modifiers.propTypes,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  style: PropTypes.shape({}),\n  renderAs: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  align: PropTypes.oneOf(['centered', 'right']),\n  kind: PropTypes.oneOf(['addons', 'group']),\n  multiline: PropTypes.bool,\n  horizontal: PropTypes.bool,\n};\n\nField.defaultProps = {\n  ...modifiers.defaultProps,\n  children: null,\n  className: '',\n  style: {},\n  renderAs: 'div',\n  align: null,\n  kind: null,\n  multiline: false,\n  horizontal: false,\n};\n\nexport default Field;\n"]}