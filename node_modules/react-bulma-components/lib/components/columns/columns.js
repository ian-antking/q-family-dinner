'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _constants = require('../../constants');

var _constants2 = _interopRequireDefault(_constants);

var _column = require('./components/column');

var _column2 = _interopRequireDefault(_column);

var _constants3 = require('./constants');

var _constants4 = _interopRequireDefault(_constants3);

var _modifiers = require('../../modifiers');

var _modifiers2 = _interopRequireDefault(_modifiers);

var _element = require('../element');

var _element2 = _interopRequireDefault(_element);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var breakpoints = [null].concat(Object.keys(_constants2.default.BREAKPOINTS).map(function (key) {
  return _constants2.default.BREAKPOINTS[key];
}));

var Columns = function Columns(_ref) {
  var _classNames;

  var className = _ref.className,
      breakpoint = _ref.breakpoint,
      gapless = _ref.gapless,
      multiline = _ref.multiline,
      centered = _ref.centered,
      props = _objectWithoutProperties(_ref, ['className', 'breakpoint', 'gapless', 'multiline', 'centered']);

  return _react2.default.createElement(_element2.default, _extends({}, props, {
    className: (0, _classnames2.default)(className, 'columns', (_classNames = {}, _defineProperty(_classNames, 'is-' + breakpoint, breakpoint), _defineProperty(_classNames, 'is-gapless', gapless), _defineProperty(_classNames, 'is-multiline', multiline), _defineProperty(_classNames, 'is-centered', centered), _classNames))
  }));
};

Columns.Column = _column2.default;

Columns.CONSTANTS = _constants4.default;

Columns.propTypes = _extends({}, _modifiers2.default.propTypes, {
  children: _propTypes2.default.node,
  className: _propTypes2.default.string,
  style: _propTypes2.default.shape({}),
  /**
     * Breakpoint where columns become stacked.
     */
  breakpoint: _propTypes2.default.oneOf(breakpoints),
  /**
     * `true` to remove space between columns
     */
  gapless: _propTypes2.default.bool,
  /**
     * `true` if you want to use more than one line if you add more column elements that would fit in a single row.
     */
  multiline: _propTypes2.default.bool,
  /**
     * `true` you want the columns inside to be horizontaly centered
     */
  centered: _propTypes2.default.bool
});

Columns.defaultProps = _extends({}, _modifiers2.default.defaultProps, {
  children: null,
  className: '',
  style: {},
  breakpoint: null,
  gapless: false,
  centered: false,
  multiline: true
});

exports.default = Columns;
//# sourceMappingURL=columns.js.map