'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _constants = require('../constants');

var _constants2 = _interopRequireDefault(_constants);

var _modifiers = require('../../../modifiers');

var _modifiers2 = _interopRequireDefault(_modifiers);

var _element = require('../../element');

var _element2 = _interopRequireDefault(_element);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var sizes = [null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].concat(Object.keys(_constants2.default.SIZES).map(function (key) {
  return _constants2.default.SIZES[key];
}));

var Column = function Column(_ref) {
  var _classNames;

  var children = _ref.children,
      className = _ref.className,
      size = _ref.size,
      offset = _ref.offset,
      narrow = _ref.narrow,
      mobile = _ref.mobile,
      tablet = _ref.tablet,
      desktop = _ref.desktop,
      widescreen = _ref.widescreen,
      fullhd = _ref.fullhd,
      props = _objectWithoutProperties(_ref, ['children', 'className', 'size', 'offset', 'narrow', 'mobile', 'tablet', 'desktop', 'widescreen', 'fullhd']);

  return _react2.default.createElement(
    _element2.default,
    _extends({}, props, {
      className: (0, _classnames2.default)(className, 'column', (_classNames = {}, _defineProperty(_classNames, 'is-' + size, size), _defineProperty(_classNames, 'is-' + mobile.size + '-mobile', mobile.size), _defineProperty(_classNames, 'is-' + tablet.size + '-tablet', tablet.size), _defineProperty(_classNames, 'is-' + desktop.size + '-desktop', desktop.size), _defineProperty(_classNames, 'is-' + widescreen.size + '-widescreen', widescreen.size), _defineProperty(_classNames, 'is-' + fullhd.size + '-fullhd', fullhd.size), _defineProperty(_classNames, 'is-offset-' + mobile.offset + '-mobile', mobile.offset), _defineProperty(_classNames, 'is-offset-' + tablet.offset + '-tablet', tablet.offset), _defineProperty(_classNames, 'is-offset-' + desktop.offset + '-desktop', desktop.offset), _defineProperty(_classNames, 'is-offset-' + widescreen.offset + '-widescreen', widescreen.offset), _defineProperty(_classNames, 'is-offset-' + fullhd.offset + '-fullhd', fullhd.offset), _defineProperty(_classNames, 'is-offset-' + offset, offset), _defineProperty(_classNames, 'is-narrow', narrow), _defineProperty(_classNames, 'is-narrow-mobile', mobile.narrow), _defineProperty(_classNames, 'is-narrow-tablet', tablet.narrow), _defineProperty(_classNames, 'is-narrow-desktop', desktop.narrow), _defineProperty(_classNames, 'is-narrow-widescreen', widescreen.narrow), _defineProperty(_classNames, 'is-narrow-fullhd', fullhd.narrow), _classNames))
    }),
    children
  );
};

Column.propTypes = _extends({}, _modifiers2.default.propTypes, {
  children: _propTypes2.default.node,
  className: _propTypes2.default.string,
  style: _propTypes2.default.shape({}),
  /**
   * The size of the column. the maximun size of a row is 12
   */
  size: _propTypes2.default.oneOf(sizes),
  /**
   * Create horizontal space around Column elements
   */
  offset: _propTypes2.default.oneOf(sizes),
  /**
   * If you want a column to only take the space it needs, use the narrow modifier. The other column(s) will fill up the remaining space.
   */
  narrow: _propTypes2.default.bool,
  /**
   * Size, Offset and Narrow props for Mobile devices (Up to 768px)
   */
  mobile: _propTypes2.default.shape({
    size: _propTypes2.default.oneOf(sizes),
    offset: _propTypes2.default.oneOf(sizes),
    narrow: _propTypes2.default.bool
  }),
  /**
   * Size, Offset and Narrow props for Tablet devices (Between 769px and 1023px)
   */
  tablet: _propTypes2.default.shape({
    size: _propTypes2.default.oneOf(sizes),
    offset: _propTypes2.default.oneOf(sizes),
    narrow: _propTypes2.default.bool
  }),
  /**
  * Size, Offset and Narrow props for Desktop devices (Between 1024px and 1215px)
  */
  desktop: _propTypes2.default.shape({
    size: _propTypes2.default.oneOf(sizes),
    offset: _propTypes2.default.oneOf(sizes),
    narrow: _propTypes2.default.bool
  }),
  /**
  * Size, Offset and Narrow props for WideScreen devices (Between 1216px and 1407px)
  */
  widescreen: _propTypes2.default.shape({
    size: _propTypes2.default.oneOf(sizes),
    offset: _propTypes2.default.oneOf(sizes),
    narrow: _propTypes2.default.bool
  }),
  /**
  * Size, Offset and Narrow props for FullHD devices (1408px and above)
  */
  fullhd: _propTypes2.default.shape({
    size: _propTypes2.default.oneOf(sizes),
    offset: _propTypes2.default.oneOf(sizes),
    narrow: _propTypes2.default.bool
  })
});

Column.defaultProps = _extends({}, _modifiers2.default.defaultProps, {
  children: null,
  className: '',
  style: {},
  size: null,
  offset: null,
  narrow: false,
  mobile: {
    size: null,
    offset: null,
    narrow: false
  },
  tablet: {
    size: null,
    offset: null,
    narrow: false
  },
  desktop: {
    size: null,
    offset: null,
    narrow: false
  },
  widescreen: {
    size: null,
    offset: null,
    narrow: false
  },
  fullhd: {
    size: null,
    offset: null,
    narrow: false
  }
});

exports.default = Column;
//# sourceMappingURL=column.js.map