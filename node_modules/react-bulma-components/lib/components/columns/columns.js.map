{"version":3,"sources":["../../../src/components/columns/columns.js"],"names":["breakpoints","concat","Object","keys","CONSTANTS","BREAKPOINTS","map","key","Columns","className","breakpoint","gapless","multiline","centered","props","Column","COLUMN_CONSTANTS","propTypes","modifiers","children","PropTypes","node","string","style","shape","oneOf","bool","defaultProps"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AAEA,IAAMA,cAAc,CAAC,IAAD,EAAOC,MAAP,CAAcC,OAAOC,IAAP,CAAYC,oBAAUC,WAAtB,EAAmCC,GAAnC,CAAuC;AAAA,SAAOF,oBAAUC,WAAV,CAAsBE,GAAtB,CAAP;AAAA,CAAvC,CAAd,CAApB;;AAEA,IAAMC,UAAU,SAAVA,OAAU;AAAA;;AAAA,MACdC,SADc,QACdA,SADc;AAAA,MAEdC,UAFc,QAEdA,UAFc;AAAA,MAGdC,OAHc,QAGdA,OAHc;AAAA,MAIdC,SAJc,QAIdA,SAJc;AAAA,MAKdC,QALc,QAKdA,QALc;AAAA,MAMXC,KANW;;AAAA,SAQd,8BAAC,iBAAD,eACMA,KADN;AAEE,eAAW,0BAAWL,SAAX,EAAsB,SAAtB,0DACFC,UADE,EACaA,UADb,gCAET,YAFS,EAEKC,OAFL,gCAGT,cAHS,EAGOC,SAHP,gCAIT,aAJS,EAIMC,QAJN;AAFb,KARc;AAAA,CAAhB;;AAmBAL,QAAQO,MAAR,GAAiBA,gBAAjB;;AAEAP,QAAQJ,SAAR,GAAoBY,mBAApB;;AAEAR,QAAQS,SAAR,gBACKC,oBAAUD,SADf;AAEEE,YAAUC,oBAAUC,IAFtB;AAGEZ,aAAWW,oBAAUE,MAHvB;AAIEC,SAAOH,oBAAUI,KAAV,CAAgB,EAAhB,CAJT;AAKE;;;AAGAd,cAAYU,oBAAUK,KAAV,CAAgBzB,WAAhB,CARd;AASE;;;AAGAW,WAASS,oBAAUM,IAZrB;AAaE;;;AAGAd,aAAWQ,oBAAUM,IAhBvB;AAiBE;;;AAGAb,YAAUO,oBAAUM;AApBtB;;AAuBAlB,QAAQmB,YAAR,gBACKT,oBAAUS,YADf;AAEER,YAAU,IAFZ;AAGEV,aAAW,EAHb;AAIEc,SAAO,EAJT;AAKEb,cAAY,IALd;AAMEC,WAAS,KANX;AAOEE,YAAU,KAPZ;AAQED,aAAW;AARb;;kBAWeJ,O","file":"columns.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport CONSTANTS from '../../constants';\nimport Column from './components/column';\nimport COLUMN_CONSTANTS from './constants';\nimport modifiers from '../../modifiers';\nimport Element from '../element';\n\nconst breakpoints = [null].concat(Object.keys(CONSTANTS.BREAKPOINTS).map(key => CONSTANTS.BREAKPOINTS[key]));\n\nconst Columns = ({\n  className,\n  breakpoint,\n  gapless,\n  multiline,\n  centered,\n  ...props\n}) => (\n  <Element\n    {...props}\n    className={classNames(className, 'columns', {\n      [`is-${breakpoint}`]: breakpoint,\n      'is-gapless': gapless,\n      'is-multiline': multiline,\n      'is-centered': centered,\n    })}\n  />\n);\n\nColumns.Column = Column;\n\nColumns.CONSTANTS = COLUMN_CONSTANTS;\n\nColumns.propTypes = {\n  ...modifiers.propTypes,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  style: PropTypes.shape({}),\n  /**\n     * Breakpoint where columns become stacked.\n     */\n  breakpoint: PropTypes.oneOf(breakpoints),\n  /**\n     * `true` to remove space between columns\n     */\n  gapless: PropTypes.bool,\n  /**\n     * `true` if you want to use more than one line if you add more column elements that would fit in a single row.\n     */\n  multiline: PropTypes.bool,\n  /**\n     * `true` you want the columns inside to be horizontaly centered\n     */\n  centered: PropTypes.bool,\n};\n\nColumns.defaultProps = {\n  ...modifiers.defaultProps,\n  children: null,\n  className: '',\n  style: {},\n  breakpoint: null,\n  gapless: false,\n  centered: false,\n  multiline: true,\n};\n\nexport default Columns;\n"]}