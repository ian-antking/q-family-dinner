{"version":3,"sources":["../../../src/components/dropdown/dropdown.js"],"names":["colors","concat","Object","keys","CONSTANTS","COLORS","map","key","Dropdown","state","open","close","evt","props","hoverable","path","find","node","htmlElement","setState","toggle","preventDefault","select","onChange","value","document","addEventListener","removeEventListener","className","children","color","align","allProps","current","modifiers","clean","childrenArray","React","Children","child","i","cloneElement","type","DropdownItem","active","onClick","classnames","PureComponent","Item","Divider","DropdownDivider","propTypes","PropTypes","string","style","shape","any","func","oneOf","bool","defaultProps","undefined"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;AAEA,IAAMA,SAAS,CAAC,IAAD,EAAOC,MAAP,CAAcC,OAAOC,IAAP,CAAYC,oBAAUC,MAAtB,EAA8BC,GAA9B,CAAkC;AAAA,SAAOF,oBAAUC,MAAV,CAAiBE,GAAjB,CAAP;AAAA,CAAlC,CAAd,CAAf;;IAEqBC,Q;;;;;;;;;;;;;;0LA6BnBC,K,GAAQ;AACNC,YAAM;AADA,K,QAYRC,K,GAAQ,UAACC,GAAD,EAAS;AACf;AACA,UAAI,MAAKC,KAAL,CAAWC,SAAX,IAAyBF,OAAOA,IAAIG,IAAJ,CAASC,IAAT,CAAc;AAAA,eAAQC,SAAS,MAAKC,WAAtB;AAAA,OAAd,CAApC,EAAuF;AACrF;AACD;AACD,YAAKC,QAAL,CAAc,EAAET,MAAM,KAAR,EAAd;AACD,K,QAEDU,M,GAAS,UAACR,GAAD,EAAS;AAChB,UAAI,MAAKC,KAAL,CAAWC,SAAf,EAA0B;AACxB;AACD;AACD,UAAIF,GAAJ,EAAS;AACPA,YAAIS,cAAJ;AACD;AACD,YAAKF,QAAL,CAAc;AAAA,YAAGT,IAAH,SAAGA,IAAH;AAAA,eAAe,EAAEA,MAAM,CAACA,IAAT,EAAf;AAAA,OAAd;AACD,K,QAEDY,M,GAAS;AAAA,aAAS,YAAM;AACtB,YAAI,MAAKT,KAAL,CAAWU,QAAf,EAAyB;AACvB,gBAAKV,KAAL,CAAWU,QAAX,CAAoBC,KAApB;AACD;AACD,cAAKb,KAAL;AACD,OALQ;AAAA,K;;;;;wCA1BW;AAClBc,eAASC,gBAAT,CAA0B,OAA1B,EAAmC,KAAKf,KAAxC;AACD;;;2CAEsB;AACrBc,eAASE,mBAAT,CAA6B,OAA7B,EAAsC,KAAKhB,KAA3C;AACD;;;6BA2BQ;AAAA;AAAA;;AAAA,mBAUH,KAAKE,KAVF;AAAA,UAELe,SAFK,UAELA,SAFK;AAAA,UAGLC,QAHK,UAGLA,QAHK;AAAA,UAILL,KAJK,UAILA,KAJK;AAAA,UAKLM,KALK,UAKLA,KALK;AAAA,UAMLC,KANK,UAMLA,KANK;AAAA,UAOLjB,SAPK,UAOLA,SAPK;AAAA,UAQLS,QARK,UAQLA,QARK;AAAA,UASFS,QATE;;AAWP,UAAIC,UAAU,IAAd;AACA,UAAMpB,QAAQqB,oBAAUC,KAAV,CAAgBH,QAAhB,CAAd;;AAEA,UAAMI,gBAAgBC,gBAAMC,QAAN,CAAehC,GAAf,CAAmBuB,QAAnB,EAA6B,UAACU,KAAD,EAAQC,CAAR,EAAc;AAC/D,YAAIA,MAAM,CAAN,IAAWD,MAAM1B,KAAN,CAAYW,KAAZ,KAAsBA,KAArC,EAA4C;AAC1CS,oBAAUM,MAAM1B,KAAN,CAAYgB,QAAtB;AACD;AACD,eAAOQ,gBAAMI,YAAN,CAAmBF,KAAnB,EAA0BA,MAAMG,IAAN,KAAeC,cAAf,GAA8B;AAC7DC,kBAAQL,MAAM1B,KAAN,CAAYW,KAAZ,KAAsBA,KAD+B;AAE7DqB,mBAAS,OAAKvB,MAAL,CAAYiB,MAAM1B,KAAN,CAAYW,KAAxB;AAFoD,SAA9B,GAG7B,EAHG,CAAP;AAID,OARqB,CAAtB;;AAUA,aACE;AAAA;AAAA,qBACMX,KADN;AAEE,eAAK,aAACI,IAAD,EAAU;AAAE,mBAAKC,WAAL,GAAmBD,IAAnB;AAA0B,WAF7C;AAGE,qBAAW,0BAAW,UAAX,EAAuBiB,oBAAUY,UAAV,CAAqBd,QAArB,CAAvB,EAAuDJ,SAAvD;AACT,yBAAa,KAAKnB,KAAL,CAAWC;AADf,kDAEFqB,KAFE,EAEQA,KAFR,gCAGT,cAHS,EAGOjB,SAHP;AAHb;AASE;AAAA;AAAA,YAAK,WAAU,kBAAf,EAAkC,MAAK,cAAvC,EAAsD,SAAS,KAAKM,MAApE;AACE;AAAC,4BAAD;AAAA,cAAQ,OAAOU,KAAf;AACE;AAAA;AAAA;AACGG;AADH,aADF;AAIE,0CAAC,cAAD,IAAM,MAAK,YAAX,EAAwB,MAAK,OAA7B;AAJF;AADF,SATF;AAiBE;AAAA;AAAA,YAAK,WAAU,eAAf,EAA+B,IAAG,eAAlC,EAAkD,MAAK,MAAvD;AACE;AAAA;AAAA,cAAK,WAAU,kBAAf;AACGG;AADH;AADF;AAjBF,OADF;AAyBD;;;;EAnHmCW,oB;;AAAjBvC,Q,CACZwC,I,GAAOL,c;AADKnC,Q,CAGZyC,O,GAAUC,iB;AAHE1C,Q,CAKZ2C,S,gBACFjB,oBAAUiB,S;AACbvB,aAAWwB,oBAAUC,M;AACrBC,SAAOF,oBAAUG,KAAV,CAAgB,EAAhB,C;AACP1B,YAAUuB,oBAAUnC,I;AACpBO,SAAO4B,oBAAUI,G;AACjBjC,YAAU6B,oBAAUK,I;AACpB3B,SAAOsB,oBAAUM,KAAV,CAAgB1D,MAAhB,C;AACP+B,SAAOqB,oBAAUM,KAAV,CAAgB,CAAC,OAAD,CAAhB,C;AACP5C,aAAWsC,oBAAUO;;AAdJnD,Q,CAiBZoD,Y,gBACF1B,oBAAU0B,Y;AACbhC,aAAW,E;AACX0B,SAAO,E;AACP9B,SAAOqC,S;AACPhC,YAAU,E;AACVN,YAAUsC,S;AACV/B,SAAO+B,S;AACP9B,SAAO8B,S;AACP/C,aAAW+C;;kBA1BMrD,Q","file":"dropdown.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport CONSTANTS from '../../constants';\nimport DropdownItem from './components/item';\nimport DropdownDivider from './components/divider';\nimport Button from '../button';\nimport Icon from '../icon';\nimport modifiers from '../../modifiers';\n\nconst colors = [null].concat(Object.keys(CONSTANTS.COLORS).map(key => CONSTANTS.COLORS[key]));\n\nexport default class Dropdown extends PureComponent {\n  static Item = DropdownItem;\n\n  static Divider = DropdownDivider;\n\n  static propTypes = {\n    ...modifiers.propTypes,\n    className: PropTypes.string,\n    style: PropTypes.shape({}),\n    children: PropTypes.node,\n    value: PropTypes.any,\n    onChange: PropTypes.func,\n    color: PropTypes.oneOf(colors),\n    align: PropTypes.oneOf(['right']),\n    hoverable: PropTypes.bool,\n  }\n\n  static defaultProps = {\n    ...modifiers.defaultProps,\n    className: '',\n    style: {},\n    value: undefined,\n    children: [],\n    onChange: undefined,\n    color: undefined,\n    align: undefined,\n    hoverable: undefined,\n  }\n\n  state = {\n    open: false,\n  }\n\n  componentDidMount() {\n    document.addEventListener('click', this.close);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('click', this.close);\n  }\n\n  close = (evt) => {\n    // IDK yet how to test using the ref in enzime\n    if (this.props.hoverable || (evt && evt.path.find(node => node === this.htmlElement))) {\n      return;\n    }\n    this.setState({ open: false });\n  }\n\n  toggle = (evt) => {\n    if (this.props.hoverable) {\n      return;\n    }\n    if (evt) {\n      evt.preventDefault();\n    }\n    this.setState(({ open }) => ({ open: !open }));\n  }\n\n  select = value => () => {\n    if (this.props.onChange) {\n      this.props.onChange(value);\n    }\n    this.close();\n  }\n\n  render() {\n    const {\n      className,\n      children,\n      value,\n      color,\n      align,\n      hoverable,\n      onChange,\n      ...allProps\n    } = this.props;\n    let current = null;\n    const props = modifiers.clean(allProps);\n\n    const childrenArray = React.Children.map(children, (child, i) => {\n      if (i === 0 || child.props.value === value) {\n        current = child.props.children;\n      }\n      return React.cloneElement(child, child.type === DropdownItem ? {\n        active: child.props.value === value,\n        onClick: this.select(child.props.value),\n      } : {});\n    });\n\n    return (\n      <div\n        {...props}\n        ref={(node) => { this.htmlElement = node; }}\n        className={classnames('dropdown', modifiers.classnames(allProps), className, {\n          'is-active': this.state.open,\n          [`is-${align}`]: align,\n          'is-hoverable': hoverable,\n        })}\n      >\n        <div className=\"dropdown-trigger\" role=\"presentation\" onClick={this.toggle}>\n          <Button color={color}>\n            <span>\n              {current}\n            </span>\n            <Icon icon=\"angle-down\" size=\"small\" />\n          </Button>\n        </div>\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {childrenArray}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"]}